import {
  Chip_default
} from "./chunk-3WOJJCWK.js";
import {
  TextField_default
} from "./chunk-J7RYBUEB.js";
import "./chunk-POVMKITX.js";
import "./chunk-7RVNXLKR.js";
import "./chunk-TMFFVI3N.js";
import "./chunk-KMIEPZV3.js";
import "./chunk-ZPGCQJCS.js";
import "./chunk-5Q2JV5FL.js";
import "./chunk-OWXO25HV.js";
import "./chunk-YY5ICLCW.js";
import "./chunk-BQYO3NS4.js";
import "./chunk-NFA72V2A.js";
import "./chunk-JDASMYX7.js";
import "./chunk-I4TSRHSI.js";
import {
  ClickAwayListener
} from "./chunk-OW5LXDBY.js";
import "./chunk-ZVJPX6KD.js";
import "./chunk-T7VUDJF6.js";
import "./chunk-CBX4OND4.js";
import "./chunk-JRSIS5FF.js";
import "./chunk-FCHVSQEE.js";
import "./chunk-HP7EZITI.js";
import {
  IconButton_default
} from "./chunk-65YKX6U6.js";
import "./chunk-LF7JRTYP.js";
import "./chunk-MFYCJFGP.js";
import "./chunk-SGPAEBA3.js";
import "./chunk-X4TB7NTJ.js";
import "./chunk-CB6VAZ5I.js";
import "./chunk-IE6NOKGP.js";
import {
  require_Close
} from "./chunk-HWXTJ3JX.js";
import "./chunk-BLWAD6TZ.js";
import "./chunk-BC4UGP4J.js";
import "./chunk-IAE7ASQD.js";
import "./chunk-QYFGN46Z.js";
import "./chunk-BYAEDIXH.js";
import "./chunk-BNDEMVIS.js";
import "./chunk-O7NEAE3R.js";
import "./chunk-HEW45OTD.js";
import "./chunk-DVYAU6Q6.js";
import "./chunk-A6SSCW6I.js";
import "./chunk-PCTZQKG2.js";
import "./chunk-L7RRNPL3.js";
import "./chunk-IU2LUV3W.js";
import "./chunk-IBRX547O.js";
import "./chunk-PWZWOS54.js";
import "./chunk-IIQINABH.js";
import {
  styled_default
} from "./chunk-XNYMN7J2.js";
import "./chunk-ULO3VGBY.js";
import "./chunk-7GNZY2FQ.js";
import "./chunk-5HX53MEP.js";
import "./chunk-T6QVC4SC.js";
import "./chunk-3AC65MQ3.js";
import {
  require_jsx_runtime
} from "./chunk-OXHRMUTN.js";
import "./chunk-S6PF2Q6R.js";
import "./chunk-JBD55MPR.js";
import "./chunk-NGLNB3LH.js";
import "./chunk-44ICRMAA.js";
import "./chunk-URAQTRU5.js";
import {
  require_react
} from "./chunk-76SXIHYG.js";
import {
  __toESM
} from "./chunk-2GTGKKMZ.js";

// node_modules/.pnpm/mui-chips-input@2.0.0_@emotion+react@11.11.1_@types+react@18.2.0_react@18.2.0__@emotion+style_w6qbfcern3mtwts5a2cxl7lrru/node_modules/mui-chips-input/dist/mui-chips-input.es.js
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_Close = __toESM(require_Close());
var O = {
  enter: "Enter",
  backspace: "Backspace"
};
var Ee = {
  ime: 229
};
var De = styled_default(Chip_default)(({ theme: t, size: n }) => `
    max-width: 100%;
    margin: 2px 4px;
    height: ${n === "small" ? "26px" : "32px"};


    &[aria-disabled="true"] > svg {
      color: ${t.palette.action.disabled};
      cursor: default;
    }

    &.MuiChipsInput-Chip-Editing {
      background-color: ${t.palette.primary.light};
      color: ${t.palette.primary.contrastText};
    }
  `);
var Ae = {
  ChipStyled: De
};
var H = (t) => {
  const {
    className: n,
    index: i,
    onDelete: r,
    disabled: s,
    onEdit: g,
    isEditing: D,
    disableEdition: h,
    ...y
  } = t, c = (d) => {
    d.key === O.enter && r(i);
  }, A = (d) => {
    var _a, _b;
    (_a = d == null ? void 0 : d.preventDefault) == null ? void 0 : _a.call(d), (_b = d == null ? void 0 : d.stopPropagation) == null ? void 0 : _b.call(d), r(i);
  }, b = (d) => {
    d.target.textContent === y.label && (s || g(i));
  };
  return (0, import_jsx_runtime.jsx)(Ae.ChipStyled, {
    className: `MuiChipsInput-Chip ${D ? "MuiChipsInput-Chip-Editing" : ""} ${n || ""}`,
    onKeyDown: c,
    disabled: s,
    onDoubleClick: h ? void 0 : b,
    tabIndex: s ? -1 : 0,
    "aria-disabled": s,
    onDelete: A,
    ...y
  });
};
function Ie(t) {
  return typeof t == "boolean";
}
function we(t) {
  return typeof t == "object" && !Array.isArray(t) && t !== null;
}
function ke(t, n) {
  typeof n == "function" ? n(t) : n && we(n) && "current" in n && (n.current = t);
}
var Oe = styled_default("div")`
  top: 50%;
  transform: translateY(-50%);
  right: 10px;
  position: absolute;
`;
var Te = styled_default(TextField_default)((t) => {
  var _a;
  return `
    max-width: 100%;

    .MuiInputBase-root {
      display: flex;
      flex-wrap: wrap;
      align-items: flex-start;
      row-gap: 5px;
      padding-top: ${t.size === "small" ? "5px" : "9px"};
      padding-right: ${((_a = t.InputProps) == null ? void 0 : _a.endAdornment) ? "30px" : "9px"};
      padding-bottom: ${t.size === "small" ? "5px" : "9px"};
      padding-left: 10px;

      input {
        min-width: 30px;
        width: auto;
        flex-grow: 1;
        text-overflow: ellipsis;
        padding: ${t.size === "small" ? "3.5px 4px" : "7.5px 4px"};
        align-self: center;
      }
    }
  `;
});
var $e = styled_default(Chip_default)(({ theme: t, size: n }) => `
    max-width: 100%;
    margin: 2px 4px;
    height: ${n === "small" ? "26px" : "32px"};

    &[aria-disabled="true"] > svg.MuiChip-deleteIcon {
      color: ${t.palette.action.disabled};
      cursor: default;
    }
  `);
var J = {
  ChipStyled: $e,
  TextFieldStyled: Te,
  EndAdornmentClose: Oe
};
var X = import_react.default.forwardRef((t, n) => {
  const {
    chips: i,
    onAddChip: r,
    onEditChip: s,
    onDeleteChip: g,
    onDeleteAllChips: D,
    InputProps: h,
    onInputChange: y,
    disabled: c,
    clearInputOnBlur: A,
    validate: b,
    error: d,
    helperText: T,
    hideClearAll: I,
    inputProps: P,
    size: $,
    disableDeleteOnBackspace: K,
    disableEdition: V,
    className: M,
    renderChip: v,
    addOnWhichKey: w,
    onFocus: o,
    inputValue: p,
    ...S
  } = t, [Z, ee] = import_react.default.useState(""), [z, Y] = import_react.default.useState(""), N = import_react.default.useRef(null), F = import_react.default.useRef(false), te = import_react.default.useRef(typeof p == "string"), [m, W] = import_react.default.useState(null), {
    onKeyDown: ne,
    ...ie
  } = P || {}, {
    inputRef: Se,
    ...le
  } = h || {}, j = () => {
    Y("");
  }, _ = te.current, k = _ ? p : Z, R = (e) => {
    y == null ? void 0 : y(e), _ || ee(e);
  }, re = (e) => {
    R(i[e]), W(e), j();
  }, E = () => {
    W(null);
  }, f = () => {
    j(), R("");
  }, oe = (e) => {
    R(e.target.value);
  }, L = () => {
    !F.current || (m !== null ? (E(), f()) : A && f(), F.current = false);
  }, ae = (e) => {
    N.current = e, n && ke(e, n);
  }, U = (e, l) => (u) => {
    if (typeof b == "function") {
      const a = b(e);
      if (a === false) {
        l.preventDefault();
        return;
      }
      if (!Ie(a) && a.isError) {
        l.preventDefault(), Y(a.textError);
        return;
      }
    }
    u();
  }, se = (e, l, u) => {
    U(e, u)(() => {
      s == null ? void 0 : s(e, l), E(), f();
    });
  }, de = (e, l) => {
    U(e, l)(() => {
      r == null ? void 0 : r(k.trim()), f();
    });
  }, pe = (e, l) => l === Ee.ime ? false : w ? Array.isArray(w) ? w.some((u) => u === e) : w === e : e === O.enter, ue = (e) => {
    const l = pe(e.key, e.keyCode), u = e.key === O.backspace, a = k.trim();
    if (e.code === "Tab") {
      L();
      return;
    }
    if (l && e.preventDefault(), k.length > 0 && l)
      a.length === 0 ? f() : m !== null ? se(a, m, e) : de(a, e);
    else if (u && k.length === 0 && i.length > 0 && !K) {
      const q = i.length - 1;
      g == null ? void 0 : g(q), m === q && E();
    }
    ne == null ? void 0 : ne(e);
  }, ce = (e) => {
    e.preventDefault(), o == null ? void 0 : o(e), F.current = true;
  }, he = (e) => {
    e.preventDefault(), !I && !c && (D == null ? void 0 : D(), f(), E());
  }, fe = (e) => {
    var _a;
    e === m ? (f(), E()) : re(e), (_a = N.current) == null ? void 0 : _a.focus();
  }, Ce = (e) => {
    c || (g == null ? void 0 : g(e), m !== null && (E(), f()));
  }, G = i.length > 0;
  return (0, import_jsx_runtime.jsx)(ClickAwayListener, {
    onClickAway: L,
    children: (0, import_jsx_runtime.jsx)(J.TextFieldStyled, {
      value: k,
      onChange: oe,
      ref: n,
      className: `MuiChipsInput-TextField ${M || ""}`,
      size: $,
      placeholder: "Type and press enter",
      onFocus: ce,
      inputProps: {
        onKeyDown: ue,
        ...ie
      },
      disabled: c,
      error: Boolean(z) || d,
      helperText: z || T,
      InputProps: {
        inputRef: ae,
        startAdornment: G ? i.map((e, l) => {
          const u = `chip-${l}`, a = {
            index: l,
            onEdit: fe,
            label: e,
            title: e,
            isEditing: l === m,
            size: $,
            disabled: c,
            disableEdition: V,
            onDelete: Ce
          };
          return v ? v(H, u, a) : (0, import_react.createElement)(H, {
            ...a,
            key: u
          });
        }) : null,
        endAdornment: I ? null : (0, import_jsx_runtime.jsx)(J.EndAdornmentClose, {
          style: {
            visibility: G ? "visible" : "hidden"
          },
          children: (0, import_jsx_runtime.jsx)(IconButton_default, {
            "aria-label": "Clear",
            title: "Clear",
            disabled: c,
            size: "small",
            onClick: he,
            children: (0, import_jsx_runtime.jsx)(import_Close.default, {
              fontSize: "small"
            })
          })
        }),
        ...le
      },
      ...S
    })
  });
});
X.defaultProps = {
  onInputChange: () => {
  },
  clearInputOnBlur: false,
  hideClearAll: false,
  disableDeleteOnBackspace: false,
  disableEdition: false,
  addOnWhichKey: O.enter,
  onDeleteChip: () => {
  },
  onAddChip: () => {
  },
  inputValue: void 0,
  onEditChip: () => {
  },
  renderChip: void 0,
  onDeleteAllChips: () => {
  },
  validate: () => true
};
function Be(t, n) {
  return [...t, n];
}
function Pe(t, n) {
  return t.filter((i, r) => n !== r);
}
function Ke(t, n, i) {
  return t.map((r, s) => n === s ? i : r);
}
var ve = import_react.default.forwardRef((t, n) => {
  const {
    value: i,
    onChange: r,
    onAddChip: s,
    onInputChange: g,
    onDeleteChip: D,
    disabled: h,
    validate: y,
    clearInputOnBlur: c,
    hideClearAll: A,
    disableDeleteOnBackspace: b,
    onEditChip: d,
    renderChip: T,
    disableEdition: I,
    addOnWhichKey: P,
    inputValue: $,
    ...K
  } = t;
  return (0, import_jsx_runtime.jsx)(X, {
    chips: i,
    onAddChip: (o) => {
      if (h)
        return;
      const p = Be(i, o), S = p.length - 1;
      s == null ? void 0 : s(o, S), r == null ? void 0 : r(p);
    },
    onInputChange: g,
    disableDeleteOnBackspace: b,
    onDeleteChip: (o) => {
      if (h)
        return;
      const p = i[o];
      r == null ? void 0 : r(Pe(i, o)), D == null ? void 0 : D(p, o);
    },
    onEditChip: (o, p) => {
      h || I || (r == null ? void 0 : r(Ke(i, p, o)), d == null ? void 0 : d(o, p));
    },
    renderChip: T,
    onDeleteAllChips: () => {
      r == null ? void 0 : r([]);
    },
    clearInputOnBlur: c,
    disabled: h,
    disableEdition: I,
    validate: y,
    inputValue: $,
    hideClearAll: A,
    addOnWhichKey: P,
    ...K,
    ref: n
  });
});
ve.defaultProps = {
  value: [],
  onChange: () => {
  },
  onAddChip: () => {
  },
  onDeleteChip: () => {
  },
  onInputChange: () => {
  },
  onEditChip: () => {
  },
  addOnWhichKey: O.enter,
  clearInputOnBlur: false,
  disableEdition: false,
  hideClearAll: false,
  disableDeleteOnBackspace: false,
  validate: () => true
};
export {
  ve as MuiChipsInput
};
//# sourceMappingURL=mui-chips-input.js.map
